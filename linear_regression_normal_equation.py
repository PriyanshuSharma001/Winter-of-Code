# -*- coding: utf-8 -*-
"""Linear_Regression_Normal_Equation.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/10iGYkn35tlvSkmlo2ytQ29UUMp6v5v5T

# ***LINEAR REGRESSION (Normal Equation)***
"""

# Importing Libraries
import numpy as np
import pandas as pd

"""## ***Training***"""

# Cost Function
def Cost(X, Y, theta):
  cost = (1/(2*(X.shape[0])))*(np.sum((np.dot(X, theta) - Y)**2))
  return cost

# Linear Regression Training Function Using Normal Equation
def LinearRegressionTraining(X, Y):
  theta = np.dot(np.dot(np.linalg.pinv(np.dot(X.T, X)), X.T), Y)
  return theta

# Function to Predict output
def Predict(X, theta):
  return np.dot(X, theta)

# Function to calculate RMSE
def RootMeanSquaredError(Y, Prediction):
  return (np.sum((Prediction-Y)**2))**(0.5)

# Importing Training Data 
TrainingData = pd.read_csv('drive/MyDrive/Colab Notebooks/Linear_train.csv')
TrainingData.pop('Unnamed: 0')
TrainingData

# Initializing X (Feature Values) for training
X = np.array(TrainingData.drop('label', axis=1))
X = np.concatenate((np.ones((X.shape[0],1)),X), axis=1)

print('X Shape : ', X.shape)
print(X)

# Initializing Y (Labels) for training
Y = np.array([TrainingData['label']]).T

print('Y Shape : ', Y.shape)
print(Y)

# Main / Determining theta (Coefficient) Values
theta = LinearRegressionTraining(X, Y)

print('theta Shape : ', theta.shape)
print(theta)

cost = Cost(X, Y, theta)
print('\nMinimized Cost : ', cost)

# Predicting Training labels
Y_Predicted = np.dot(X, theta)

print('[[  EXPECTED    :    PREDICTED ]]')
print(np.concatenate((Y, Y_Predicted), axis=1))

print('\nRoot Mean Squared Error :', RootMeanSquaredError(Y, Y_Predicted))

"""## ***Testing***"""

# TESTING
# Importing Testing Data
TestingData = pd.read_csv('drive/MyDrive/Colab Notebooks/Linear_test.csv')
TestingData.pop('Unnamed: 0')
TestingData

# Initializing X_test
X_test = np.array(TestingData.drop('label', axis=1))
X_test = np.concatenate((np.ones((X_test.shape[0],1)),X_test), axis=1)

print('X_test shape : ', X_test.shape)
print(X)

# Initializing Y_test
Y_test = np.array([TestingData['label']]).T

print('Y_test shape : ', Y_test.shape)
print(Y_test)

# Predicting test labels
Y_test_Predicted = Predict(X_test, theta)

print('[[  EXPECTED    :    PREDICTED ]]')
print(np.concatenate((Y_test, Y_test_Predicted), axis=1))

print('\nRoot Mean Squared Error :', RootMeanSquaredError(Y_test, Y_test_Predicted))

"""## ***Misc***"""

# Misc Example
Input = np.array([np.arange(1,10001)])
Input = Input.T
Output = 13*Input + 0.552
Input = np.concatenate((np.ones((Input.shape[0],1)), Input), axis=1)

print('Input shape : ', Input.shape)
print(Input)

print('\nOutput shape : ', Output.shape)
print(Output)

# Expected theta0 = 0.552
# Expected theta1 = 13
thetaNew = LinearRegressionTraining(Input, Output)
print('\nthetaNew Shape : ', thetaNew.shape)
print(thetaNew)

print('\nMinimized Cost : ', Cost(Input, Output, thetaNew))